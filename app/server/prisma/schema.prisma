// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Make sure to look into Cascade deletes and updates, and how to handle them in Prisma? 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODOS: 
// - ENROLLEMENT and GROUP INVITES AND REQUESTS 
// - NOTIFICATION STATUSES? 
// - SUBMISSION, PEER REVIEW, INSTRUCTOR REVIEW, GROUP REVIEW STATUSES?

// User Models

// model Student {
//   studentId                 String             @id @default(uuid())
//   username                  String             @unique
//   password                  String
//   email                     String             @unique
//   firstname                 String
//   lastname                  String
//   classes                   StudentInClass[] // Retrieve Assignments based on classes they are. 
//   submissions               Submission[]
//   peerReviewsDone           PeerReview[]       @relation("Reviewer")
//   peerReviewsRecieved       PeerReview[]       @relation("Reviewee")
//   instructorReviewsRecieved InstructorReview[] @relation("RevieweeStudent")
//   studentGroups             StudentInGroup[]
//   GroupSubmission           GroupSubmission[]  @relation("SubmittedByStudent")
// }

model User {
  userId            String        @id @default(uuid())
  username          String
  password          String
  email             String        @unique
  firstname         String
  lastname          String
  role              UserRole      @default(STUDENT)
  classes           UserInClass[]
  submissions       Submission[]
  reviewsDone       Review[]      @relation("Reviewer")
  reviewsRecieved   Review[]      @relation("Reviewee")
  classesInstructed Class[]       @relation("InstructorClasses")
  Rubric            Rubric[]
}

// // Need to refactor last references to others tables, depending on what we want instructors to be able to pull up
// model Instructor {
//   instructorId      String             @id @default(uuid())
//   username          String             @unique
//   password          String
//   email             String             @unique
//   firstname         String
//   lastname          String
//   // isAdmin            Boolean             @default(false) // Create separate admin model?
//   classes           Class[]            @relation("TaughtBy") // Classes the instructor is teaching
//   rubricsCreated    Rubric[]           @relation("RubricCreatedByInstructor") // Rubrics created by the instructor
//   instructorReviews InstructorReview[] @relation("ReviewerInstructor")
// }

// Admin General Crud operations 

// Class and Assignment Models

model Class {
  classId      String        @id @default(uuid())
  instructorId String        @unique
  classname    String
  description  String
  startDate    DateTime
  endDate      DateTime
  term         String?
  classSize    Int?          @default(0)
  usersInClass UserInClass[]
  Assignments  Assignment[]
  instructor   User          @relation("InstructorClasses", fields: [instructorId], references: [userId]) // Only one instructor per class
}

model UserInClass {
  userId  String
  classId String
  utudent User   @relation(fields: [userId], references: [userId])
  class   Class  @relation(fields: [classId], references: [classId])

  @@id([userId, classId])
}

// Removing, Single instructor for a class, Admin can which instructors are associated with a class

// model InstructorInClass {
//   instructorId String
//   classId      String
//   Instructor   Instructor @relation(fields: [instructorId], references: [instructorId])
//   Class        Class      @relation(fields: [classId], references: [classId])

//   @@id([instructorId, classId])
// }

// Make a many to many relationship with rubric 
model Assignment {
  assignmentId  String             @id @default(uuid())
  classId       String
  title         String
  description   String?
  dueDate       DateTime
  maxSumissions Int                @default(1)
  // fileType      SubmissionType
  classes       Class              @relation(fields: [classId], references: [classId])
  rubric        AssignmentRubric[] // An assignment can have multiple rubrics, I.E a group review rubric vs an assignment rubric   
  submissions   Submission[]
}

// Group Models

// model Group {
//   groupId   String            @id @default(uuid())
//   assignmentId     String
//   classId          String
//   groupName        String
//   assignment       Assignment        @relation(fields: [assignmentId], references: [assignmentId])
//   class            Class             @relation(fields: [classId], references: [classId])
//   studentInGroup    StudentInGroup[] // Students in the group
//   GroupSubmissions GroupSubmission[] // Submissions from the group
// }

// model StudentInGroup {
//   studentId      String
//   groupId String
//   student        Student      @relation(fields: [studentId], references: [studentId])
//   groupProject   GroupProject @relation(fields: [groupId], references: [groupId])

//   @@id([studentId, groupProjectId])
// } 

// Group Sumbission + Group Review  

// 3 Types of eval -> peer, isntructor, group

// Submission Models

model Submission {
  submissionId       String     @id @default(uuid())
  assignmentId       String
  submitterId        String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  sumbissionFilePath String
  // sumbissionType     SubmissionType // Either a File or a URL, we need to discuss file storage options
  finalGrade         Int? // Final grade of the Submission, default to the instructor grade?
  assignment         Assignment @relation(fields: [assignmentId], references: [assignmentId])
  submitter          User       @relation(fields: [submitterId], references: [userId])
  reviews            Review[]
}

// model GroupSubmission {
//   submissionId       String         @id @default(uuid())
//   groupProjectId     String
//   createdAt          DateTime       @default(now())
//   updatedAt          DateTime       @updatedAt
//   submittedBy        String // The studentId of the student who made the submission
//   submissionFilePath String
// submissionType     SubmissionType // Either a File or a URL, we need to discuss file storage options
//   grade              Int? // Final grade of the Submission, Graded by the instructor)
//   // groupProject       GroupProject   @relation(fields: [groupProjectId], references: [groupProjectId])
//   submittedByUser    User           @relation("SubmittedByUser", fields: [submittedBy], references: [userId])
// }

// Review model. 

// model PeerReview {
//   peerReviewId           String                  @id @default(uuid())
//   submissionId           String
//   studentReviewerId      String
//   revieweeId             String
//   createdAt              DateTime                @default(now())
//   updatedAt              DateTime                @updatedAt
//   peerReviewGrade        Int // Total grade of the review = sum of reviewerCriteronGrades
//   submission             Submission              @relation(fields: [submissionId], references: [submissionId])
//   reviewerStudent        Student                 @relation("Reviewer", fields: [studentReviewerId], references: [studentId])
//   reviewee               Student                 @relation("Reviewee", fields: [revieweeId], references: [studentId])
//   reviewerCriteronGrades StudentCriterionGrade[]
// }

// Way to check if all students have submitted their group reivew,  
// and if not, send a reminder to the students who haven't submitted  

// Group Review is 

model Review {
  reviewId        String           @id @default(uuid())
  submissionId    String
  reviewerId      String
  revieweeId      String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  reviewGrade     Int // Total grade of the review = sum of reviewerCriteronGrades
  submission      Submission       @relation(fields: [submissionId], references: [submissionId])
  reviewer        User             @relation("Reviewer", fields: [reviewerId], references: [userId])
  reviewee        User             @relation("Reviewee", fields: [revieweeId], references: [userId])
  criterionGrades CriterionGrade[]
}

// Way to check if all students have submitted their group reivew,  
// and if not, send a reminder to the students who haven't submitted  

// Group Review is 

// model InstructorReview {
//   instructorReviewId       String                     @id @default(uuid())
//   submissionId             String
//   instructorReviewerId     String
//   revieweeId               String
//   createdAt                DateTime                   @default(now())
//   updatedAt                DateTime                   @updatedAt
//   instructorReviewGrade    Int // Total grade of the review = sum of instructorCriteronGrades
//   submission               Submission                 @relation(fields: [submissionId], references: [submissionId])
//   reviewerInstructor       Instructor                 @relation("ReviewerInstructor", fields: [instructorReviewerId], references: [instructorId])
//   reviewee                 Student                    @relation("RevieweeStudent", fields: [revieweeId], references: [studentId])
//   instructorCriterionGrade InstructorCriterionGrade[]
// }

// TODO refactor / reimplment GroupReview

// model GroupReview {
//   groupReviewId     String       @id @default(uuid())
//   groupProjectId    String
//   rubricId          String
//   studentReviewerId String
//   revieweeId        String
//   createdAt         DateTime     @default(now())
//   updatedAt         DateTime     @updatedAt
//   reviewerStudent   Student     @relation("Reviewer", fields: [studentReviewerId], references: [studentId])
//   revieweeStudent   Student     @relation("Reviewee", fields: [revieweeId], references: [studentId])
//   groupProject      GroupProject @relation(fields: [groupProjectId], references: [groupProjectId])
// }

// Rubric and Criterion Models

// Make a many to many relationship with assignment
model Rubric {
  rubricId    String             @id @default(uuid())
  creatorId   String
  title       String
  description String?
  totalMarks  Int // Total marks of the rubric? Not sure if this is needed or not 
  createdBy   User               @relation(fields: [creatorId], references: [userId])
  criteria    Criterion[]
  assignments AssignmentRubric[]
  // GroupSubmission     GroupSubmission[]
}

model AssignmentRubric {
  assignmentId String
  rubricId     String
  assignment   Assignment @relation(fields: [assignmentId], references: [assignmentId])
  rubric       Rubric     @relation(fields: [rubricId], references: [rubricId])

  @@id([assignmentId, rubricId])
}

model Criterion {
  criterionId      String           @id @default(uuid())
  rubricId         String
  title            String
  criterionRatings String // Shows ratings 
  maxMark          Int
  minMark          Int
  rubric           Rubric           @relation(fields: [rubricId], references: [rubricId])
  // criteronRatings          CriteronRating[] 
  criterionGrades  CriterionGrade[]
}

// model CriteronRating {
//   criteronRatingId String    @id @default(uuid())
//   criterionId      String
//   description      String
//   // points           Int // Points are auto generated by server-side logic based on the number of ratings and rank
//   // rank             Int // Rank of ratings I.E. : Where 1 = Best and 5 = Worst
//   criterion        Criterion @relation(fields: [criterionId], references: [criterionId])
// }

// Criterion Grade Models

model CriterionGrade {
  criterionGradeId String    @id @default(uuid())
  reviewId         String
  criterionId      String
  grade            Int
  review           Review    @relation(fields: [reviewId], references: [reviewId])
  criterion        Criterion @relation(fields: [criterionId], references: [criterionId])
}

// model StudentCriterionGrade {
//   studentCriteronGradeId String     @id @default(uuid())
//   criterionId            String
//   peerReviewId           String
//   grade                  Int
//   textEntry              String
//   criterion              Criterion  @relation(fields: [criterionId], references: [criterionId])
//   peerReview             PeerReview @relation(fields: [peerReviewId], references: [peerReviewId])
// }

// model InstructorCriterionGrade {
//   instructorCriteronGradeId String           @id @default(uuid())
//   criterionId               String
//   instructorReviewId        String
//   grade                     Int
//   textEntry                 String
//   criterion                 Criterion        @relation(fields: [criterionId], references: [criterionId])
//   instructorReview          InstructorReview @relation(fields: [instructorReviewId], references: [instructorReviewId])
// }

// Todo 
// Enroll links to clases and enrollRequests
// Todo 
// EnrollRequest links to Enroll and students

// TODO
// Request / Status Models 
// I.e. Enrollment, Group Invites, Intructor to Admin Requests 

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum SubmissionType {
  FILE
  URL
}
